<!DOCTYPE html>

<html lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xt="http://ns.inria.org/xtiger">
<head>
  <meta name="description" content="This is a tutorial explaining to Javascript developers how to turn web pages with XTiger XML instructions into structured document editors. It explains how to generate the editor, load XML data into it and export its content to XML."/>
  <meta name="keywords" content="xml, Javascript, authoring application, editing, xml framework, template, XTiger" />

  <title>Tutorial: creating editable web page with AXEL</title>

  <link rel="stylesheet" href="tutorial.css" type="text/css"/>

  <!-- jQuery -->
  <script type="text/javascript" src="../3rd-part/jquery/js/jquery-1.7.2.min.js"></script>

  <!-- Embedded XTiger XML template  -->
  <xt:head version="1.1" templateVersion="1.0" label="greetings">
    <xt:component name="personList">
      <ul>
        <xt:repeat minOccurs="0" maxOccurs="*" label="persons">
          <li><xt:use types="text" label="name" param="shape=parent-75px;type=textarea">name</xt:use><xt:menu-marker/></li>
        </xt:repeat>
      </ul>
    </xt:component>
  </xt:head>

  <!-- Code to transform embedded XTiger XML template into editor at load time  -->
  <script type="text/javascript" src="../axel/axel.js"></script>
  <link rel="stylesheet" href="../axel/axel.css" type="text/css"></link>
  <script type="text/javascript">
    var transformed = { 'a' : true, 'b' : false, 'c' : false };
    function init() {
      var n = document.getElementById('embedded');
      $axel.setup({ bundlesPath : '../axel/bundles', enableTabGroupNavigation: true });
      $axel(n).transform();
      $('a[onclick]').bind('click', function(event) {  event.preventDefault(); });
    }
    xtdom.addEventListener(window,  'load', init, false);
  </script>

  <!-- Non AXEL Javascript used for tutorial  -->
  <script type="text/javascript" src="src/tutorial.js"></script>
  <script type="text/javascript">
    var guiTrans = { 'show' : ['block', 'hide'], 'hide' : ['none', 'show'] };
    var targets = ['template', 'include', 'transform-a', 'transform-b', 'transform-c', 'feed-a', 'feed-b', 'feed-c', 'dump-a', 'dump-b', 'dump-c', 'explainTemplate', 'explainInclude', 'explainTransform-a', 'explainTransform-b', 'explainTransform-c', 'explainFeed', 'explainDump' ]

    xtdom.addEventListener(window, 'load', initTutorial, false);
  </script>

</head>
<body>
 <div class="content">
  <h1>Tutorial: creating editable web pages with AXEL</h1>

  <p>By S. Sire, <a href="http://www.oppidoc.fr">Oppidoc</a>,  (Last edited 2013-08-21)</p>

  <p>This document describes the new API (since AXEL 1.3.2) to generate document editors inside web application pages and to interact with the editors to load and save XML data. This API is based on a <var>$axel</var> object, it supersedes the <a href="tutorial.xhtml">legacy API</a> based on the <var>xtiger.util.form</var> object.</p>

  <p>The <code>$axel</code> object is a wrapper function that takes a node set specification and returns a wrapped set object supporting several functions that act on the first element (or on all elements) of the node set. This tutorial presents the <code>transform</code>, <code>load</code> and <code>save</code> functions that act on the <b>first element</b> of the wrapped set to respectively generate an editor, load XML data into it, and serialize XML data from it.</p>

  <p>It is very convenient to use the <var>$axel</var> object together with the jQuery library since you can then directly pass a node set specification as a jQuery selector string or as a jQuery wrapped set. You can still use the <var>$axel</var> object without jQuery if you pass it directly DOM node(s) to interact with. For latest information about the <var>$axel</var> object and for a description of other wrapped set functionalities you may consult its <a href="wiki">wiki page</a>.</p>

  <noscript><p>You must activate Javscript to see the full content of this document.</p></noscript>

  <!-- =============== STEP 1 =============== -->

  <h2><span class="step">Step 1</span> : write an XTiger XML template</h2>

  <p>Follow the <a href="http://ssire.github.io/xtiger-xml-spec/" target="blank_">XTiger XML specification</a>. You can use the <a href="../templates/samples/Template.xhtml" target="_blank">Template.xhtml</a> provided with the distribution as a skeleton (<span id="templateToggle" class="button">show</span> source). For a quick introduction to XTiger XML you may also have a look at this <a href="../docs/xtiger-summary.html">executive summary</a>.</p>

  <div id="template" class="sample source">
    <pre>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

  &lt;html xmlns="http://www.w3.org/1999/xhtml"
        xmlns:xt="http://ns.inria.org/xtiger">
  &lt;head>
    &lt;!-- Use UTF-8 and omit xml protocol at the top for IE -->
    &lt;meta http-equiv="content-type" content="text/html; charset=UTF-8" />
    &lt;meta http-equiv="X-UA-Compatible" content="IE=edge" />

    &lt;title>XTiger XML with AXEL tutorial&lt;/title>

    &lt;xt:head version="1.1" templateVersion="1.0" label="greetings">
      &lt;xt:component name="personList">
        &lt;ul>
          &lt;xt:repeat minOccurs="0" maxOccurs="*" label="persons">
            &lt;li>
              &lt;xt:use types="text" param="shape=parent-75px;type=textarea"
                 label="name">name&lt;/xt:use>&lt;xt:menu-marker/>
            &lt;/li>
          &lt;/xt:repeat>
        &lt;/ul>
      &lt;/xt:component>
    &lt;/xt:head>

    &lt;!-- See Step 2 -->

  &lt;/head>
  &lt;body>
    &lt;div id="document">
        &lt;p class="template">Template directly embedded within this page&lt;/p>
        &lt;p>List of persons to great:&lt;/p>

        &lt;xt:use types="personList"/>
    &lt;/div>
  &lt;/body>
  &lt;/html></pre>
  <p class="explain noprint"><span id="explainTemplateToggle" class="button">show</span> explanation</p>
  </div>

  <div id="explainTemplate" class="explanation">
  <p>The best compromise to be able to open your Web page in standard compliant browsers AND in Internet Explorer is to save the file as UTF-8 and to omit the xml protocol declaration (i.e. <tt>&lt;?xml version="1.0" encoding="UTF-8"?></tt>). So the file should start directly with an XHTML DOCTYPE declaration. It is recommended to read the <a href="http://www.w3.org/TR/xhtml1/#guidelines" target="_blank">HTML Compatibility Guidelines</a> from the XHTML 1.0 Recommendation before writing template files. You  may also use <a href="http://dev.w3.org/html5/spec-LC/the-xhtml-syntax.html" target="_blank">the XHTML syntax</a> of HTML5.</p>

  <p>It is wised to specify the content-type with a meta element, this improves MIME-Type sniffing when opening the file directly from a local file system on Internet Explorer. If you access the file from a Web server, you should serve it with a MIME TYPE set to application/xhtml+xml, except for Internet Explorer that only supports text/html when the template is also the Web page (variant a in Step 3). Eventually you can specify Microsoft <tt>X-UA-Compatible</tt> property to tell Internet Explorer to open the page in  a specific mode, currently AXEL works with IE starting from 7, and on all other major browsers (at least Firefox, Safari, Chrome, Opera).</p>
  </div>

  <!-- =============== STEP 2 =============== -->

  <h2><span class="step">Step 2</span> : include AXEL library inside your web application page</h2>

  <p>You need to include both the <code>axel.js</code> file containing the library and the corresponding <code>axel.css</code> file. In addition the <code>bundles</code> path of the AXEL distribution must be avalaible on your server (<span id="includeToggle" class="button">show</span> source)</p>

<div id="include" class="sample source">
  <pre class="source">&lt;script type="text/javascript" src="{PATH-TO}/axel/axel.js">&lt;/script>
&lt;link rel="stylesheet" href="{PATH-TO}/axel/axel.css" type="text/css">&lt;/link>
  </pre>

  <p class="explain noprint"><span id="explainIncludeToggle" class="button">show</span> explanation</p>
</div>

<div id="explainInclude" class="explanation">
  <p>The <code>src</code> attribute of the <code>script</code> element must point to the location where you have copied the AXEL library file <code>axel.js</code> which is distributed inside the <code>axel/</code> folder.</p>

  <p>You must include the global AXEL CSS file <code>axel.css</code> which is distributed under the same <code>axel/</code> folder (<i>excepted if you are applying variant C of step 3)</i>.</p>

  <p>Finally you also must make the <code>axel/bundles/</code> folder of the AXEL distribution available and provide a <var>bundlesPath</var> parameter to the <code>$axel.setup</code> function with a string path (relative to your web application page) leading to the <code>bundles</code> folder of the AXEL distribution.</p>

    <p>You can generate a new AXEL library file with your own selection of plugins by editing the <code>scripts/build.xml</code> file and with a build.lib target with ant (<tt>cd scripts; ant build.lib</tt>). This supposes you have installed the Yahoo UI compressor and set its path into the <var>javascript.compressor</var> variable in the file <code>scripts/ant.properties</code>. Otherwise you may generate an uncompressed version of the library with the ant <code>build.debug</code> target.</p>
</div>

  <h2><span class="step">Step 3</span> : write the template transformation code  inside your web application page</h2>

  <!-- =============== STEP 3, variant A =============== -->

  <h3 id="variant-a">Variant a : your web page is also the XTiger XML template page</h3>

  <p>The <code>div</code> below contains some XTiger XML declarations which have been transformed immediately after page loading through a registered <code>load</code> event handler (<span id="transform-aToggle" class="button">show</span> source). Consequently you can edit a list of persons :</p>

  <div id="embedded" class="editor" style="padding: 20px 10px 10px 10px">
      <p class="template">Template self-contained into this page</p>
      <p>List of persons to great:</p>

      <xt:use types="personList"/>
  </div>

  <div id="transform-a" class="sample source">
    <p>To generate the editor defined in the &lt;div id="embedded"> element
in a web application page that is also an XTiger XML template, you can write :</p>

    <pre class="source">    &lt;script type="text/javascript">
      function init() {
        var n = document.getElementById('embedded');
        $axel.setup({ bundlesPath : '{PATH-TO}/axel/bundles', enableTabGroupNavigation: true });
        $axel(n).transform();
      }
      xtdom.addEventListener(window, 'load', init, false);
    &lt;/script></pre>

    <p>Alternatively if you have included jQuery inside your web page, you can directly pass a jQuery selector string to the <code>$axel</code> object :</p>

    <pre class="source">    &lt;script type="text/javascript">
      function initApp() {
        $axel.setup({ bundlesPath : '{PATH-TO}/axel/bundles', enableTabGroupNavigation: true });
        $axel('#embedded').transform();
      }
      jQuery(function() { initApp(); });
    &lt;/script></pre>

    <p>Note that if you want to treat the whole page as a single editor, you can directly pass the <code>document</code> object to the <code>$axel</code> object such as :</p>

    <pre class="source">$axel(document).transform()</pre>
    
    <p>You can also directly pass the AXEL setup as an option hash to the <code>transform</code> method :</p>

    <pre class="source">$axel('#embedded').transform({ bundlesPath : '{PATH-TO}/axel/bundles', enableTabGroupNavigation: true })</pre>

    <p class="explain noprint"><span id="explainTransform-aToggle" class="button">show</span> explanation</p>
  </div>

  <div id="explainTransform-a" class="explanation">
    <p>You can call the <code>$axel.setup</code> function in a page load event handler or right before generating an editor. Note that you can also initialize some other globals by the same occasion, such as <var>enableTabGroupNavigation</var> to enable tab navigation between editor's fields, however this functionality is not yet fully functional on all browsers. The settings are memorized so that you just need to set them once even if you use the <var>$axel</var> object multiple times.</p>
    
    <p>Note that the <code>xtdom.addEventListener</code> function is an AXEL function to register event handlers, you may of course use any other function, especially since that function may be deprecated in the future.</p>
  </div>

  <!-- =============== STEP 3, variant B =============== -->

  <h3 id="variant-b">Variant b : your web page contains a div that you fill with an external XTiger XML template</h3>

  <p><a href="#variant-b" onclick="javascript:$axel('#placeholder').transform('Hello-world.xhtml');transformed.b=true">Click</a> to load and transform the external <var>Hello-world.xhtml</var> XTiger XML template into the <code>div</code> below (<span id="transform-bToggle" class="button">show</span> source) :</p>

  <div class="editor" style="padding: 20px 10px 10px 10px">
      <p class="template">Template dynamically loaded with Ajax</p>
      <div id="placeholder"/>
  </div>

  <div id="transform-b" class="sample source">
    <p>To generate the editor defined by the "Hello-world.xhtml" template
inside the &lt;div id="placeholder"> element of a web application page, you can write :</p>
    <pre class="source">$axel('#placeholder').transform('Hello-world.xhtml')</pre>
    
    <p>Once again you can also directly pass the AXEL setup as an auxiliary option hash to the <code>transform</code> method :</p>

    <pre class="source">$axel('#placeholder').transform('Hello-world.xhtml', { bundlesPath : '{PATH-TO}/axel/bundles', 
      enableTabGroupNavigation: true })</pre>
    
    <p class="explain noprint"><span id="explainTransform-bToggle" class="button">show</span> explanation</p>
  </div>

  <div id="explainTransform-b" class="explanation">
    <p>By passing a string to the <code>transform</code> function you instruct the <var>$axel</var> object to first retrieve an XTiger XML document at the URL/path specified by the string, and then to transform it and to copy the result of the transformation inside the first element of the wrapped set passed to the <var>$axel</var> object.</p>

    <p>The URL/path string is passed to an internal <code>xtiger.cross.loadDocument</code> function to retrieve the XTiger XML document. It uses an XHR object in synchronous mode. Alternatively you can use your own function to first load the XTiger XML document. In that case you just need to pass the resulting XML Document object (typically your own <code>xhr.responseXML</code> if you are using XHR) to the <code>transform</code> function instead of a URL/path string.</p>
  </div>

  <!-- =============== STEP 3, variant C =============== -->

  <h3 id="variant-c">Variant c : your web page contains an iframe that contains an external XTiger XML template</h3>

  <p><a href="#variant-c" onclick="$axel('#iframe').transform({ injectStylesheet : '../axel/axel.css' })">Click</a> to transform the XTiger XML template inside the iframe below into an editor (<span id="transform-cToggle" class="button">show</span> source) :</p>

  <div class="editor" style="padding: 20px 10px 10px 10px">
      <p class="template">Template inside an iframe</p>
      <iframe id="iframe" src="Hello-World.xhtml"/>
  </div>

  <div id="transform-c" class="sample source">
    <p>To generate the editor defined by the "Hello-world.xhtml" template inside the &lt;iframe id="iframe" src="Hello-world.xhtml"> element of a web application page, you can write :</p>
    <pre class="source">$axel('#iframe').transform({ injectStylesheet : '{PATH-TO}/axel/axel.css' })</pre>
    
    <p>Once again you can also directly pass the AXEL setup as supplementary options in the options hash parameter of the <code>transform</code> method :</p>

    <pre class="source">$axel('#iframe').transform({ bundlesPath : '{PATH-TO}/axel/bundles', 
      enableTabGroupNavigation: true, injectStylesheet : '{PATH-TO}/axel/axel.css' })</pre>

    <p class="explain noprint"><span id="explainTransform-cToggle" class="button">show</span> explanation</p>
  </div>

  <div id="explainTransform-c" class="explanation">
    <p>By invoking the <code>transform</code> method on an <var>$axel</var> object wrapping an <code>iframe</code> element, it will treat the content of the <code>iframe</code> as an XTiger XML template and transform it into an editor. You do not need to include the AXEL Javascript file into the XTiger XML template as using this procedure the <code>iframe</code> content will be transformed by the AXEL library of the parent window (your web application page). However you should pass an option hash to the <code>transform</code> method with an <i>injectStylesheet</i> key containing the path leading to the AXEL css file so that it will be automatically injected by the <code>$axel</code> object into the <code>iframe</code> document. You may omit this if your template directly imports the AXEL css file, but it is usually more convenient to write XTiger XML templates independent of the AXEL library code location.</p>

    <p>The advantage of this approach is that the XTiger XML template may include its own CSS files that you do not need to include in the parent web application page.</p>

    <p><i>NOT YET AVAILABLE</i> : Note that you can also pass a URL/path string to the <code>transform</code> function. In that case it will set the <var>src</var> attribute of the <code>iframe</code> element to that string and register a <code>load</code> event handler on the iframe to transform its content when loaded.</p>

    <p>Any eventual nested <code>iframe</code> elements inside the <code>iframe</code> document will not be transformed using this method !</p>
  </div>

  <!-- =============== STEP 4 =============== -->

    <h3><span class="step">Step 4</span> : Load an XML document (<a href="sample.xml" target="Sample Document">sample.xml</a>) into the editor</h3>

    <p>The procedure to load XML content into an editor generated with the <code>transform</code> method is independant of the variant. You just need to call the <code>load</code> method that applies to the first element of the <code>$axel</code> wrapped set. It takes as input either a complete XML string containing a valid XML document, a URL/path string pointing to an XML document, or an XML document object (<span id="explainFeedToggle" class="button">show</span> explanation)</p>

    <table>
      <thead>
        <th>Variant a</th>
        <th>Variant b</th>
        <th>Variant c</th>
      </thead>
      <tbody>
        <tr>
          <td>
            <p><a href="#variant-a" onclick="$axel('#embedded').load('sample.xml')">Click</a> to load data into variant a editor (<span id="feed-aToggle" class="button">show</span> source)</p>
            <div id="feed-a" class="sample source">
              <pre>$('#embedded').load('sample.xml')</pre>
            </div>
          </td>
          <td>
            <p><a href="#variant-b" onclick="if (transformed.b) { $axel('#placeholder').load('sample.xml') } else { alert('Generate the editor first in Step 3')}">Click</a> to load data into variant b editor (<span id="feed-bToggle" class="button">show</span> source)</p>
            <div id="feed-b" class="sample source">
              <pre>$('#placeholder').load('sample.xml')</pre>
            </div>
          </td>
          <td>
            <p><a href="#variant-c" onclick="$axel('#iframe').load('sample.xml')">Click</a> to load data into variant c editor (<span id="feed-cToggle" class="button">show</span> source)</p>
            <div id="feed-c" class="sample source">
              <pre>$('#iframe').load('sample.xml')</pre>
            </div>
          </td>
        </tr>
      </tbody>
    </table>

  <div id="explainFeed" class="explanation">
    <p>A string containing an XML document is parsed first into an XML document using internal methods and then wrapped into an internal <code>xtiger.util.DOMDataSource</code> that is passed to the XML loading algorithm.</p>
    <p>A URL/path string to an XML document is first loaded with an internal <code>xtiger.cross.loadDocument</code> function in synchronous mode and then treated as in the first case.</p>
    <p>An XML document is directly wrapped into an internal <code>xtiger.util.DOMDataSource</code> that is passed to the XML loading algorithm.</p>
  </div>

  <!-- =============== STEP 5 =============== -->

    <h3 id="xml-dump"><span class="step">Step 5</span> : Dump the XML document from the editor</h3>

    <p>The procedure to dump XML content from an editor generated with the <code>transform</code> method is independant of the variant. You just need to call the <code>xml</code> method that applies to the first element of the <code>$axel</code> wrapped set. It will return a string with the current XML content of the editor (<span id="explainDumpToggle" class="button">show</span> explanation)</p>

    <table>
      <thead>
        <th>Variant a</th>
        <th>Variant b</th>
        <th>Variant c</th>
      </thead>
      <tbody>
        <tr>
          <td>
            <p><a href="#xml-dump" onclick="$('#xml-a').text($axel('#embedded').xml())">Click</a> to copy the XML data from variant a editor in the <code>#xml-a</code> div below (<span id="dump-aToggle" class="button">show</span> source)</p>
            <div id="dump-a" class="sample source">
              <pre>$('#xml-a').text($axel('#embedded').xml())</pre>
            </div>
            <pre id="xml-a">
            </pre>
          </td>
          <td>
            <p><a href="#xml-dump" onclick="$('#xml-b').text($axel('#placeholder').xml())">Click</a> to copy the XML data from variant a editor in the <code>#xml-b</code> div below (<span id="dump-bToggle" class="button">show</span> source)</p>
            <div id="dump-b" class="sample source">
              <pre>$('#xml-b').text($axel('#placeholder').xml())</pre>
            </div>
            <pre id="xml-b">
            </pre>
          </td>
          <td>
            <p><a href="#xml-dump" onclick="$('#xml-c').text($axel('#iframe').xml())">Click</a>to copy the XML data from variant a editor in the <code>#xml-c</code> div below (<span id="dump-cToggle" class="button">show</span> source)</p>
            <div id="dump-c" class="sample source">
              <pre>$('#xml-b').text($axel('#iframe').xml())</pre>
            </div>
            <pre id="xml-c">
            </pre>
          </td>
        </tr>
      </tbody>
    </table>

  <div id="explainDump" class="explanation">
    <p>The <code>xml</code> function returns the editor's content into an XML string. You are then free to do whatever you want with that string such as submitting it to a server using an XMLHTTPRequest object or any higher level-library for doing XHR (e.g. jQuery's <a href="http://api.jquery.com/jQuery.ajax/" target="_blank">$.ajax</a> function with <var>data</var> set to the XML string and <var>contentType</var> set to <code>"application/xml; charset=UTF-8"</code>). For instance in the code above we use jQuery's <code>text</code> function to paste the XML string into a div</p>
    <p>The <code>xml</code> function may be invoked on any wrapped set. It will serializes to XML the content below the first node. If that first node has not been transformed to an editor using the <code>transform</code> function the <code>xml</code> function will arbitrarily generate a <code>data</code> root node (since it cannot guess the root node) and serialize whatever it can find inside. This is a way to  serialize partial content of an editor. <i>The roadmap is to better support partial serialization with some extra parameters to control the name of the root node and/or disable its generation.</i></p>
    <p>A current limitation is that if you are trying to serialize a sub-tree containing several generated editors, the <code>xml</code> function behavior is not specified. For instance <a href="#explainDump" onclick="alert($axel(document).xml())">Click</a> to see the effect of <code>$axel(document).xml()</code> on this document that contains several editors.</p>
  </div>

  <!-- =============== ERROR REPORTING =============== -->

    <h3 id="reporting"><span class="step">Note</span> : Error reporting</h3>

<p>Currently the errors raised inside <code>$axel</code> functions are reported by an internal function that shows an alert with the error message. You can overwrite that function by providing a new error function handler to the <code>error</code> parameter of the global settings. The function receives a single string parameter containing an error message (currently in english, the localization of error messages is on the roadmap).</p>

<p>For instance <a href="#reporting" onclick="$axel('#embedded').load('not-existing.xml')">Click</a> to load the content of an unkown file inside the variant a editor using the internal XHR request: that should result in an error.</p>

 <p>The roadmap is to add success as well as error callbacks to the <code>$axel</code> object to report success / error with some more complete description of the conditions.</p>

 <!-- =============== ANNEXE 1 =============== -->

  <h3><span class="step">Annexe 1</span> : Compatibility with AXEL-FORMS</h3>

  <p>To use the <a href="http://ssire.github.io/axel-forms/" target="_blank">AXEL-FORMS</a> companion library you just need to include the <code>axel-forms.js</code> script after the <code>axel.js</code> script in your web page as described in Step 2.</p>

  <p>The <code>load</code> and <code>xml</code> functions of the <code>$axel</code> object are compatible with AXEL-FORMS out of the box. The <code>transform</code> function may require some extra initialization steps for some functionalities.</p>

  <p>There is no extra initialization step to use the primitive editors and filters from AXEL-FORMS (e.g. 'choice' or 'input' plugins, 'select2' filter).</p>

  <p>If you want to use some primitive editors from AXEL-FORMS with some filters from AXEL you may need to explicitely register them by calling code such as   <code>$axel.filter.applyTo({ 'optional' : 'input', 'event' : 'input' })</code> before calling the <code>transform</code> function. For instance the previous example extends AXEL-FORMS 'input' plugin with AXEL 'optional' and 'event' filters.</p>

  <p>If you are using some commands and bindings from AXEL-FORMS, you SHOULD use the <a href="https://github.com/ssire/axel-forms/wiki/The-%27template%27-command">'template'</a> command to generate the editor instead of the <code>$axel.transform</code> function. This is preferable since as a side effect it will extend primitive editors from AXEL-FORMS with filters from AXEL as explained in the previous paragraph, and perform some extra initializations required by the commands and bindings. However if you still want to use the <code>transform</code> function then you should manually do those initializations immediately after the template transformation. <i>More explanations to come</i>.</p>

  <p>The roadmap is to reduce the extra initialization steps to nothing more than inclusion of <code>axel-forms.js</code>.</p>

<!-- =============== ANNEXE 1 =============== -->

  <h3><span class="step">Annexe 2</span> : Beyond creating editors, creating transformation chains with client-side XSLT</h3>

  <p>You can use the <code>xml</code> function to retrieve the xml content of the editor. Then you can generate a new XML document to be processed by a client-side XSLT processor such as <a href="http://www.saxonica.com/ce/index.xml" target="_blank">Saxon-CE</a>.</p>

  <p><i>More explanations to come</i>.</p>
</div>
</body>
</html>
