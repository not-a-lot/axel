<!DOCTYPE html>
<html lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xt="http://ns.inria.org/xtiger" xml:lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />

    <title>The style filters</title>

    <xt:head version="1.1" templateVersion="1.0" label="Demo">
    </xt:head>

    <style type="text/css">
div.hilite {
  background: yellow;
  border: solid 2px red;
}
div.grid1 {
  width: 33%;
}
div.grid2 {
  width: 66%;
}
div.grid3 {
  width: 100%;
}
    </style>

    <!-- template enrichment : extracts and generates xt:attribute and xt:use sample code -->
    <link rel="stylesheet" type="text/css" href="../shared/demo.css" />
    <script type="text/javascript" src="../../3rd-part/jquery/js/jquery-1.7.2.min.js">//</script>
    <script type="text/javascript" src="../shared/demo.js">//</script>
  </head>
  <body class="toplevel">
    <h1>The style filters</h1>

    <p>The style filters is a set of filters that turn editing fields into live CSS property editors. They interpret the value of the field as CSS property values. They apply these properties live onto one or more DOM target elements.</p>

    <h2>The "style" filter</h2>

    <p>The <code>"style"</code> filter interprets the content of a text entry field as a CSS property defined by the filter's <var>style_property</var> parameter.</p>

    <p>The "style" filter is compatible with the "text" and "select" plugins.</p>

    <h3>Parameters</h3>

    <ul class="parameters">
      <li><var>style_property</var> (<code>class</code>) : name of the CSS property that will be affected by the filter</li>
      <li><var>style_root_class</var> (<code>undefined</code>) : class name that a DOM element must hold to become an ancestor of an element controlled by the filter</li>
      <li><var>style_target_class</var> (<code>undefined</code>) : class name that the descendants of the root element must carry to be controlled by the filter</li>
      <li><var>style_rule_selector</var> (<code>undefined</code>) : CSS selector the filter will use to dynamically insert and update a CSS rule that will set the <var>style_property</var> targeted by the selector to the current editor's value; this is an alternative mechanism to the <var>style_root_class</var>/<var>style_target_class</var> mechanism; both can be used in parallel</li>
    </ul>
    
    <p>Currently the filter only applies to the closest ancestor of the editing field with the <var>style_root_class</var> class name, and to the first of its descendants holding the <var>style_target_class</var> class name.</p>

    <h3>Sample usage</h3>

    <div class="hilite style1">
      <p>This div's background color is controlled by the text entry field below</p>
    </div>

    <div class="demo extract">
      <p>Please type in a color : <xt:use types="text" label="Style1Text" option="unset" param="filter=style;style_property=background;style_root_class=toplevel;style_target_class=style1">green</xt:use>
        or choose directly : <xt:use types="select" label="Style1Select" option="unset" values="green blue orange chartreuse #123456" param="filter=style;style_property=background;style_root_class=toplevel;style_target_class=style1">green</xt:use></p>
    </div>

    <h3>With parameter <var>style_unit</var></h3>

    <div class="hilite style2">
      <p>This div's width is controlled by the text entry fields below</p>
    </div>

    <div class="demo extract">
      <p>Please type in a width in percent : <xt:use types="text" label="StylePercentWidth" option="unset" param="filter=style;style_property=width;style_root_class=toplevel;style_target_class=style2;style_unit=%">25</xt:use>%
        or in pixels : <xt:use types="select" label="StylePixelWidth" option="unset" values="100 200 300 400 500" param="filter=style;style_property=width;style_root_class=toplevel;style_target_class=style2;style_unit=px">100</xt:use>px</p>
    </div>

    <h3>With parameter <var>style_value</var></h3>

    <div class="hilite style3 grid2">
      <p>This div's width is controlled by the text entry fields below through a grid<i>x</i> class (there are three possible values from 1 to 3). The interest of the <tt>style_value</tt> parameter in that case is to serialize an integer instead of a full class name so that it is compatible with any grid system (e.g. custom system, 960 or Bootstrap).</p>
    </div>

    <div class="demo extract">
      <p>Please choose a cell span : <xt:use types="select" label="StyleCellSpan"  param="filter=style;style_property=class;style_root_class=toplevel;style_target_class=style3;style_value=grid$_" values="1 2 3">2</xt:use></p>
    </div>

    <h3>Using the <var>style_rule_selector</var> selector</h3>

    <div>
      <p>The selector below will change the left margin for all the paragraphs inside the document.</p>
    </div>

    <div class="demo extract">
      <p>Please select size for the left margin of &lt;p> elements : <xt:use types="text" label="LeftMargin" option="unset" param="filter=style;style_rule_selector=p;style_property=margin-left;style_unit=px">0</xt:use>px</p>
    </div>

    <h3>Using the <var>style_rule</var> selector</h3>

    <div>
      <p>This is similar to the <var>style_rule_selector</var> but with a compact syntax that allows to generate several CSS rules at the same time. The CSS rule(s) are generated by replacing the <code>$_</code> with the current field value. The selector below will change the left margin for all the titles and paragraphs inside the document.</p>
    </div>

    <div class="demo extract">
      <p>Please select size for the left margin of &lt;p> elements : <xt:use types="text" label="LeftMargin" option="unset" param="filter=style;style_rule=h1,h2,h3{margin-left:$_px} p{margin-left:$_px}">0</xt:use>px</p>
    </div>

    <h3>Other example</h3>
    
    <div class="list-sample-root">
      <p>Changing the <i>list-style-type</i> property <xt:attribute types="text" name="ListStyleType"
          param="placeholder=empty;filter=style;style_property=list-style-type;style_root_class=list-sample-root;style_value=decimal;style_target_class=list2style" 
          option="unset" default="decimal"/> #.</p>
      <ul class="list2style">
        <li>red</li>
        <li>green</li>
        <li>blue</li>
      </ul>
    </div>

    <h2>The "width" filter</h2>

    <p>NOTE: <i>this filter is DEPRECATED since it is superseded by the "style" filter above</i></p>

    <p>The <code>"width"</code> filter interprets the content of a text entry field as a width in pixels.</p>

    <p>The "width" filter is compatible with the "text" plugin.</p>

    <h3>Parameters</h3>

    <ul class="parameters">
      <li><var>width_root_class</var> (<code>undefined</code>) : class name that a DOM element must hold to become an ancestor of an element controlled by the filter</li>
      <li><var>width_target_class</var> (<code>undefined</code>) : class name that the descendants of the root element must carry to be controlled by the filter</li>
    </ul>

    <h3>Sample usage</h3>

    <div class="hilite width1 style1">
      <p>This div's width is controlled by the text entry field below</p>
    </div>

    <div class="demo extract">
      <p>Please enter a width : <xt:use types="text" label="Width1" option="unset" param="filter=width;width_root_class=toplevel;width_target_class=width1">200</xt:use>px</p>
    </div>

  </body>
</html>
