<!DOCTYPE html>
<html lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xt="http://ns.inria.org/xtiger" xml:lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />

    <title>The "photo" plugin</title>

    <xt:head version="1.1" templateVersion="1.0" label="Demo">
    </xt:head>

    <!-- CSS file for the photo uploader wrapper -->
    <link rel="stylesheet" type="text/css" href="../../axel/bundles/photo/photo.css"/>

    <!-- Photo upload script -->
    <script type="text/javascript">//<![CDATA[
    function finishTransmission(status, result) {
      var pwin = window.parent; // only if this template is run from inside an iframe !
      var manager = pwin.xtiger.factory('upload').getInstance(document);
      if (manager) {
        manager.reportEoT(status, result);
      }
    }
    //]]></script>

    <style type="text/css" media="screen">

    div.grid {
    position: relative;
    }
    div.cell {
    float: left;
    margin: 0 10px 10px 0;
    }
    img.bordered {
      padding: 4px;
      border: solid 1px black;
    }
    </style>

    <!-- template enrichment : extracts and generates xt:attribute and xt:use sample code -->
    <link rel="stylesheet" type="text/css" href="../shared/demo.css" />
    <script type="text/javascript" src="../../3rd-part/jquery/js/jquery-1.7.2.min.js">//</script>
    <script type="text/javascript" src="../shared/demo.js">//</script>
  </head>
  <body>
    <p class="warning">To test photo upload, you must have opened this application from a web server implementing the photo upload protocol. For instance you can test with the <tt>scripts/server.rb</tt>.</p>

    <h1>The "photo" plugin</h1>

    <p>The <code>"photo"</code> plugin uploads photos to a Web server and displays the result as an <code>img</code> image handler. Photos are sent with a POST request, as described in <a href="../../docs/howto-photo-plugin.html" target="_blank"><tt>photo-plugin-howto</tt></a>.</p>

    <p>There are a few pre-conditions to use this editor :</p>

    <ul>
      <li>include the photo upload script inside your template (see template source)</li>
      <li>include the photo lens CSS style sheet inside your template (see template source)</li>
    </ul>

    <p>Optionaly you can :</p>

    <ul>
      <li>embed a hidden (e.g. with <i>display:none</i>) documentId filter on a text field in your template; the photo upload protocol will transmit the current value of documentId to the server when uploading a photo thus providing a mean for the server to link the photo with a document; however another approach is to code the document identification wihtin the photo upload URL</li>
    </ul>

    <p>The image handler (either of an uploaded photo or of one of the default icons) has an <code>axel-photo-model</code> class name. You can also declare a <var>photo_class</var> parameter to add another class name that will be set only on an image handler of an uploaded photo. You can use these class names to style it (e.g. setting <var>max-width</var> and/or <var>max-height</var>).</p>

    <p>The examples below put the photo inside an <code>xt:use</code> element to generate an element in the XML content model, but they could as well put it inside an <code>xt:attribute</code> element to generate an attribute in the XML content model.</p>

    <ul class="parameters">
      <li><var>trigger</var> (<code>mouseover|<b>click</b></code>) : user action that triggers editing mode</li>
      <!-- <li><var>padding</var> (<code>10</code>) : internal padding of the popup window lens</li> -->
      <li><var>photo_url</var> (<code><b>/upload</b></code>) : optional string with the URL of the web service end point managing the photo upload protocol</li>
      <li><var>photo_class</var> (<code>undefined</code>) : optional class added to the <code>img</code> image handler when it shows an uploaded photo</li>
      <li><var>photo_base</var> (<code>undefined</code>) : optional prefix that will be added to the image URL returned by the photo upload protocol before it is set as the <var>src</var> attribute of the <code>img</code> image handler</li>
    </ul>
    <div class="grid">

      <div class="cell">
        <h3>Default configuration</h3>

        <p class="caption">This is equivalent to <code>&lt;xt:use types="photo" label="photo" param="display=above;trigger=click"/></code></p>
        <div class="demo extract">
          <p class="edit"><xt:use types="photo" label="photo"/></p>
        </div>
      </div>

      <div class="cell">
        <h3>With <var>display</var> <code>"inline"</code> and <var>trigger</var> <code>"mouseover"</code></h3>

        <div class="demo extract">
          <p><xt:use types="photo" label="photo" param="display=inline;trigger=mouseover"/></p>
        </div>
      </div>

      <div class="cell">
        <h3>With <var>display</var> <code>"above"</code> and <var>trigger</var> <code>"click"</code></h3>

        <p class="demo extract">
          <p><xt:use types="photo" label="photo" param="display=above;trigger=click"/></p>
        </p>
      </div>

      <div class="cell">
        <h3>With <var>display</var> <code>"above"</code> and <var>trigger</var> <code>"mouseover"</code></h3>

        <div class="demo extract">
          <p><xt:use types="photo" label="photo" param="display=above;trigger=mouseover"/></p>
        </div>
      </div>

      <div class="cell">
        <h3>With <var>display</var> <code>"inline"</code> and <var>trigger</var> <code>"click"</code> and a  <var>photo_class</var> </h3>

        <div class="demo extract">
          <p class="edit"><xt:use types="photo" label="photo" param="display=inline;trigger=click;photo_class=bordered"/></p>
        </div>
      </div>

    </div>
  </body>
</html>
